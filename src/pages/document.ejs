<!doctype html>
<html>

<head>
  <meta charset="utf-8" />
  <title>antd在线编辑</title>
  <link href="https://unpkg.com/antd@3.18.0/dist/antd.min.css" rel="stylesheet">
</head>
<body>
  <div id="root"></div>
  <script src="https://unpkg.com/react/umd/react.development.js"></script>
  <script src="https://unpkg.com/react-dom/umd/react-dom.development.js"></script>
  <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
  <script src="https://unpkg.com/moment@2.19.3/moment.js"></script>
  <script src="https://unpkg.com/antd@3.18.0/dist/antd.min.js"></script>
  <script type='text/javascript'>
    Babel.registerPlugin("babel-module", function (babel) {
      var t = babel.types; // AST模块
      return {
        visitor: {
          Identifier(path) {
            if (path.node.name === "ReactDOM") {
              path.replaceWith(
                t.memberExpression(
                  t.identifier("window"),
                  t.stringLiteral("ReactDOM"),
                  true
                )
              );
            }
          },
          ImportDeclaration(path) {
            const { node } = path;
            const {
              objectPattern,
              objectProperty,
              variableDeclaration,
              variableDeclarator
            } = t;
            var specifiers = node.specifiers.filter(
              specifier => specifier.type === "ImportSpecifier"
            );
            var memberExp = t.memberExpression(
              t.identifier("window"),
              node.source,
              true
            ); // 成员表达式
            var varDeclare = variableDeclaration("var", [
              variableDeclarator(
                objectPattern(
                  specifiers.map(specifier =>
                    objectProperty(
                      specifier.local,
                      specifier.local,
                      false,
                      true
                    )
                  )
                ),
                memberExp
              )
            ]);
            path.replaceWith(varDeclare);
          }
        }
      };
    });
  </script>
</body>

</html>